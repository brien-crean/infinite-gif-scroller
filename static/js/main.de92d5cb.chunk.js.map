{"version":3,"sources":["private/config.js","components/Video/Video.js","components/Header/Header.js","components/List/Button.js","AppContext.js","components/List/List.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","StyledVideo","styled","video","_templateObject","Video","props","videoRef","useRef","useEffect","IntersectionObserver","entries","map","entry","current","readyState","intersectionRatio","play","pause","err","console","log","concat","root","rootMargin","threshold","observe","react_default","a","createElement","ref","loop","muted","autoPlay","type","src","videoURL","HeaderContainer","div","Header_templateObject","HeaderTitle","h1","_templateObject2","Header","Button","button","Button_templateObject","AppContext","createContext","AppProvider","state","gifs","offset","fetchGIFs","fetch","_this","then","response","json","data","setState","Object","toConsumableArray","pagination","this","Provider","value","children","Component","Consumer","ListContainer","List_templateObject","VideoList","List_templateObject2","List","context","useContext","components_Header_Header","gif","components_Video_Video","key","id","images","original_mp4","mp4","List_Button","onClick","GlobalStyle","createGlobalStyle","App_templateObject","App","AppContext_AppProvider","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0EAAAA,EAAOC,QAAU,CACfC,QAAS,uUCEX,IAAMC,EAAcC,IAAOC,MAAVC,KA0CFC,EApCD,SAACC,GACb,IAAMC,EAAWC,iBAAO,MA4BxB,OA1BAC,oBAAU,WAOiB,IAAIC,qBAAqB,SAACC,GACjDA,EAAQC,IAAI,SAACC,GACX,GAAoC,IAAhCN,EAASO,QAAQC,WACnB,IACEF,EAAMG,kBAAoB,GACtBT,EAASO,QAAQG,OACjBV,EAASO,QAAQI,QAEvB,MAAOC,GACLC,QAAQC,IAAR,UAAAC,OAAsBH,IAG1B,OAAO,QAlBK,CACdI,KAAM,KACNC,WAAY,MACZC,UAAW,KAmBIC,QAAQnB,EAASO,WAIlCa,EAAAC,EAAAC,cAAC5B,EAAD,CAAa6B,IAAKvB,EAAUwB,MAAI,EAACC,OAAK,EAACC,UAAQ,GAC7CN,EAAAC,EAAAC,cAAA,UAAQK,KAAK,YAAYC,IAAK7B,EAAM8B,+PCrC1C,IAAMC,EAAkBnC,IAAOoC,IAAVC,KAOfC,EAActC,IAAOuC,GAAVC,KAUFC,EANA,kBACbhB,EAAAC,EAAAC,cAACQ,EAAD,KACEV,EAAAC,EAAAC,cAACW,EAAD,yaCdJ,IAkBeI,EAlBA1C,IAAO2C,OAAVC,qBCANC,EAAaC,0BAEbC,6MACJC,MAAQ,CACNC,KAAM,GACNC,OAAQ,KAOVC,UAAY,WACVC,MAAK,kDAAAhC,OAAmDtB,UAAnD,qBAAAsB,OAA8EiC,EAAKL,MAAME,SAC3FI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJJ,EAAKK,SAAS,CAAET,KAAI,GAAA7B,OAAAuC,OAAAC,EAAA,EAAAD,CAAMN,EAAKL,MAAMC,MAAjBU,OAAAC,EAAA,EAAAD,CAAyBF,EAAKA,OAAOP,OAAQO,EAAKI,WAAWX,OAAS,2FAP9FY,KAAKX,6CAYL,OACE1B,EAAAC,EAAAC,cAACkB,EAAWkB,SAAZ,CAAqBC,MAAO,CAC1BhB,MAAOc,KAAKd,MACZG,UAAWW,KAAKX,YAEfW,KAAK1D,MAAM6D,iBAxBMC,aA8BXrB,IACYA,EAAWsB,+QC5BtC,IAAMC,EAAgBpE,IAAOoC,IAAViC,KAIbC,EAAYtE,IAAOoC,IAAVmC,KCTAC,EDgBF,WACX,IAAMC,EAAUC,qBAAW7B,GACnBI,EAASwB,EAAQzB,MAAjBC,KACR,OACExB,EAAAC,EAAAC,cAACyC,EAAD,KACE3C,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sHACAF,EAAAC,EAAAC,cAAA,iEAEFF,EAAAC,EAAAC,cAAC2C,EAAD,KAEIrB,EACIA,EAAKvC,IAAI,SAAAkE,GAAG,OACVnD,EAAAC,EAAAC,cAACkD,EAAD,CAAOC,IAAKF,EAAIG,GAAI7C,SAAU0C,EAAII,OAAOC,aAAaC,QAExD,KAENzD,EAAAC,EAAAC,cAACwD,EAAD,CAAQC,QAASX,EAAQtB,WAAzB,mME/BR,IAAMkC,EAAcC,YAAHC,KAoBFC,mLATX,OACE/D,EAAAC,EAAAC,cAAC8D,EAAD,KACEhE,EAAAC,EAAAC,cAAC0D,EAAD,MACA5D,EAAAC,EAAAC,cAAC+D,EAAD,cANUxB,aCDEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.de92d5cb.chunk.js","sourcesContent":["module.exports = {\n  API_KEY: 'WWPrS8ckWBqDzMx1jsEfvLvhDOEn0Lbw'\n};","import React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst StyledVideo = styled.video`\n  width: 500px;\n  height: 200px;\n  margin-bottom: 50px;\n`;\n\nconst Video = (props) => {\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    const options = {\n      root: null, // viewport for checking visiblity of the target - window if null or not specified\n      rootMargin: \"0px\",\n      threshold: 0.9 // < 90% of the element is viewable trigger callback\n    };\n\n    const playBackObserver = new IntersectionObserver((entries) => {\n      entries.map((entry) => {\n        if (videoRef.current.readyState === 4) {\n          try {\n            entry.intersectionRatio > 0.9\n              ? videoRef.current.play()\n              : videoRef.current.pause();\n          }\n          catch (err) {\n            console.log(`ERROR: ${err}`);\n          }\n        }\n        return null;\n      })\n    }, options);\n\n    playBackObserver.observe(videoRef.current);\n  })\n\n  return (\n    <StyledVideo ref={videoRef} loop muted autoPlay>\n      <source type=\"video/mp4\" src={props.videoURL} />\n    </StyledVideo>\n  )\n}\n\nexport default Video;","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderContainer = styled.div`\n  background-color: #222;\n  height: 75px;\n  padding: 20px;\n  color: white;\n`;\n\nconst HeaderTitle = styled.h1`\n  font-size: 1.5em;\n`;\n\nconst Header = () => (\n  <HeaderContainer>\n    <HeaderTitle>Infinite Scroller using the Interaction Observer API</HeaderTitle>\n  </HeaderContainer>\n)\n\nexport default Header;","import styled from 'styled-components';\n\nconst Button = styled.button`\n  background-color: lightgray;\n  border: #222 1px solid;\n  color: black;\n  font-size: 20px;\n  width: 150px;\n  height: 50px;\n  font-family: Helvetica;\n  margin-bottom: 100px;\n  &:hover {\n    background-color: black;\n    color: lightgray;\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport default Button;","import React, { Component, createContext } from 'react';\nimport { API_KEY } from './private/config';\nconst AppContext = createContext();\n\nclass AppProvider extends Component {\n  state = {\n    gifs: [],\n    offset: 0\n  }\n\n  componentDidMount() {\n    this.fetchGIFs()\n  }\n\n  fetchGIFs = () => {\n    fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=10&offset=${this.state.offset}`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ gifs: [...this.state.gifs,...data.data], offset: data.pagination.offset + 10 })\n      })\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={{\n        state: this.state,\n        fetchGIFs: this.fetchGIFs\n      }}>\n        {this.props.children}\n      </AppContext.Provider>\n    )\n  }\n}\n\nexport default AppContext;\nexport const AppConsumer = AppContext.Consumer;\nexport { AppProvider };","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport Video from '../Video/Video';\nimport Header from '../Header/Header';\nimport Button from './Button';\nimport AppContext from '../../AppContext';\n\nconst ListContainer = styled.div`\n  text-align: center;\n`;\n\nconst VideoList = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst List = () => {\n  const context = useContext(AppContext);\n  const { gifs } = context.state;\n  return (\n    <ListContainer>\n      <Header />\n      <div>\n        <p>Javascript Interaction Observer API used control video element playback based on each elements visibility</p>\n        <p>The top trending GIFs are pulled as mp4s from GIPHY</p>\n      </div>\n      <VideoList>\n        {\n          gifs\n            ? gifs.map(gif => (\n                <Video key={gif.id} videoURL={gif.images.original_mp4.mp4} />\n              ))\n            : null\n        }\n        <Button onClick={context.fetchGIFs}>More...</Button>\n      </VideoList>\n    </ListContainer>\n  )\n}\n\nexport default List;","import List from './List';\n\nexport default List;","import React, { Component } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport List from './components/List';\nimport { AppProvider } from './AppContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: \"Segoe UI\", \"Roboto\", \"Oxygen\", sans-serif;\n  }\n`;\n\nclass App extends Component {\n\n  render() {\n    return (\n      <AppProvider>\n        <GlobalStyle />\n        <List />\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}