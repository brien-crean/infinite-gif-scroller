{"version":3,"sources":["private/config.js","components/Video/Video.js","AppContext.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","Video","props","videoRef","useRef","useEffect","IntersectionObserver","entries","map","entry","current","readyState","intersectionRatio","play","pause","err","console","log","concat","root","rootMargin","threshold","observe","react_default","a","createElement","ref","className","loop","muted","autoPlay","type","src","videoURL","AppContext","createContext","AppProvider","state","gifs","offset","fetchGIFs","fetch","_this","then","response","json","data","setState","Object","toConsumableArray","pagination","this","Provider","value","children","Component","List","Consumer","context","useContext","gif","components_Video_Video","key","id","images","original_mp4","mp4","onClick","App","AppContext_AppProvider","components_List_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gFAAAA,EAAOC,QAAU,CACfC,QAAS,oPCsCIC,SApCD,SAACC,GACb,IAAMC,EAAWC,iBAAO,MA4BxB,OA1BAC,oBAAU,WAOiB,IAAIC,qBAAqB,SAACC,GACjDA,EAAQC,IAAI,SAACC,GACX,GAAoC,IAAhCN,EAASO,QAAQC,WACnB,IACEF,EAAMG,kBAAoB,GACtBT,EAASO,QAAQG,OACjBV,EAASO,QAAQI,QAEvB,MAAOC,GACLC,QAAQC,IAAR,UAAAC,OAAsBH,IAG1B,OAAO,QAlBK,CACdI,KAAM,KACNC,WAAY,MACZC,UAAW,KAmBIC,QAAQnB,EAASO,WAEpCM,QAAQC,IAAId,GAEVoB,EAAAC,EAAAC,cAAA,SAAOC,IAAKvB,EAAUwB,UAAU,QAAQC,MAAI,EAACC,OAAK,EAACC,UAAQ,GACzDP,EAAAC,EAAAC,cAAA,UAAQM,KAAK,YAAYC,IAAK9B,EAAM+B,4BChCpCC,EAAaC,0BAEbC,6MACJC,MAAQ,CACNC,KAAM,GACNC,OAAQ,KAOVC,UAAY,WACVC,MAAK,kDAAAvB,OAAmDlB,UAAnD,qBAAAkB,OAA8EwB,EAAKL,MAAME,SAC3FI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJJ,EAAKK,SAAS,CAAET,KAAI,GAAApB,OAAA8B,OAAAC,EAAA,EAAAD,CAAMN,EAAKL,MAAMC,MAAjBU,OAAAC,EAAA,EAAAD,CAAyBF,EAAKA,OAAOP,OAAQO,EAAKI,WAAWX,OAAS,2FAP9FY,KAAKX,6CAYL,OACEjB,EAAAC,EAAAC,cAACS,EAAWkB,SAAZ,CAAqBC,MAAO,CAC1BhB,MAAOc,KAAKd,MACZG,UAAWW,KAAKX,YAEfW,KAAKjD,MAAMoD,iBAxBMC,aA8BXrB,ICHAsB,GDIYtB,EAAWuB,eC9BzB,WACX,IAAMC,EAAUC,qBAAWzB,GACnBI,EAASoB,EAAQrB,MAAjBC,KACR,OACEf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAChBJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAd,yDAEFJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,sHACAF,EAAAC,EAAAC,cAAA,iEAEFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAEXW,EACIA,EAAK9B,IAAI,SAAAoD,GAAG,OACVrC,EAAAC,EAAAC,cAACoC,EAAD,CAAOC,IAAKF,EAAIG,GAAI9B,SAAU2B,EAAII,OAAOC,aAAaC,QAExD,MAGR3C,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAAawC,QAAST,EAAQlB,WAAhD,cCXS4B,mLARX,OACE7C,EAAAC,EAAAC,cAAC4C,EAAD,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,cALUf,aCQEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.d74b4531.chunk.js","sourcesContent":["module.exports = {\n  API_KEY: 'WWPrS8ckWBqDzMx1jsEfvLvhDOEn0Lbw'\n};","import React, { useRef, useEffect } from 'react';\nimport './Video.css';\n\nconst Video = (props) => {\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    const options = {\n      root: null, // viewport for checking visiblity of the target - window if null or not specified\n      rootMargin: \"0px\",\n      threshold: 0.9 // < 90% of the element is viewable trigger callback\n    };\n\n    const playBackObserver = new IntersectionObserver((entries) => {\n      entries.map((entry) => {\n        if (videoRef.current.readyState === 4) {\n          try {\n            entry.intersectionRatio > 0.9\n              ? videoRef.current.play()\n              : videoRef.current.pause();\n          }\n          catch (err) {\n            console.log(`ERROR: ${err}`);\n          }\n        }\n        return null;\n      })\n    }, options);\n\n    playBackObserver.observe(videoRef.current);\n  })\n  console.log(videoRef)\n  return (\n    <video ref={videoRef} className=\"Video\" loop muted autoPlay>\n      <source type=\"video/mp4\" src={props.videoURL} />\n    </video>\n  )\n}\n\nexport default Video;","import React, { Component, createContext } from 'react';\nimport { API_KEY } from './private/config';\nconst AppContext = createContext();\n\nclass AppProvider extends Component {\n  state = {\n    gifs: [],\n    offset: 0\n  }\n\n  componentDidMount() {\n    this.fetchGIFs()\n  }\n\n  fetchGIFs = () => {\n    fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=10&offset=${this.state.offset}`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ gifs: [...this.state.gifs,...data.data], offset: data.pagination.offset + 10 })\n      })\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={{\n        state: this.state,\n        fetchGIFs: this.fetchGIFs\n      }}>\n        {this.props.children}\n      </AppContext.Provider>\n    )\n  }\n}\n\nexport default AppContext;\nexport const AppConsumer = AppContext.Consumer;\nexport { AppProvider };","import React, { useContext } from 'react';\nimport Video from '../Video/Video';\nimport AppContext from '../../AppContext';\nimport './List.css';\n\nconst List = () => {\n  const context = useContext(AppContext);\n  const { gifs } = context.state;\n  return (\n    <div className=\"List\">\n      <header className=\"List-header\">\n        <h1 className=\"List-title\">Infinite Scroller using the Interaction Observer API</h1>\n      </header>\n      <div className=\"List-description\">\n        <p>Javascript Interaction Observer API used control video element playback based on each elements visibility</p>\n        <p>The top trending GIFs are pulled as mp4s from GIPHY</p>\n      </div>\n      <div className=\"List-videos\">\n        {\n          gifs\n            ? gifs.map(gif => (\n                <Video key={gif.id} videoURL={gif.images.original_mp4.mp4} />\n              ))\n            : null\n        }\n      </div>\n      <button className=\"Fetch-gifs\" onClick={context.fetchGIFs}>More...</button>\n    </div>\n  )\n}\n\nexport default List;","import React, { Component } from 'react';\nimport List from './components/List/List';\nimport { AppProvider } from './AppContext';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <AppProvider>\n        <List />\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}