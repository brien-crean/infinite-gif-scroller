{"version":3,"sources":["private/config.js","components/Video/Video.js","components/Header/Header.js","AppContext.js","components/List/Observable.js","components/List/List.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","StyledVideo","styled","video","_templateObject","Video","props","videoRef","useRef","useEffect","playBackObserver","IntersectionObserver","entries","map","entry","current","readyState","intersectionRatio","play","pause","err","console","log","concat","root","rootMargin","threshold","observe","unobserve","react_default","a","createElement","ref","loop","muted","autoPlay","type","src","videoURL","HeaderContainer","div","Header_templateObject","HeaderTitle","h1","_templateObject2","Header","AppContext","createContext","AppProvider","state","gifs","limit","fetchGIFs","fetch","_this","then","response","json","data","setState","pagination","count","this","Provider","value","children","Component","Consumer","Observable","observableRef","context","useContext","observableObserver","_ref","Object","slicedToArray","isIntersecting","ListContainer","List_templateObject","VideoList","List_templateObject2","StyledLink","_templateObject3","Description","_templateObject4","List","components_Header_Header","gif","index","key","id","href","embed_url","title","components_Video_Video","images","original_mp4","mp4","GlobalStyle","createGlobalStyle","App_templateObject","App","AppContext_AppProvider","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3b147a6.chunk.js","sourcesContent":["module.exports = {\n  API_KEY: 'WWPrS8ckWBqDzMx1jsEfvLvhDOEn0Lbw'\n};","import React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst StyledVideo = styled.video`\n  width: 500px;\n  height: 200px;\n  margin-bottom: 50px;\n`;\n\nconst Video = (props) => {\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    const options = {\n      root: null, // viewport for checking visiblity of the target - window if null or not specified\n      rootMargin: \"0px\",\n      threshold: 0.9 // < 90% of the element is viewable trigger callback\n    };\n\n    const playBackObserver = new IntersectionObserver((entries) => {\n      entries.map((entry) => {\n        if (videoRef.current.readyState === 4) {\n          try {\n            entry.intersectionRatio > 0.9\n              ? videoRef.current.play()\n              : videoRef.current.pause();\n          }\n          catch (err) {\n            console.log(`ERROR: ${err}`);\n          }\n        }\n        return null;\n      })\n    }, options);\n\n    playBackObserver.observe(videoRef.current);\n\n    // cleanup\n    return () => { playBackObserver.unobserve(videoRef.current) }\n  })\n\n  return (\n    <StyledVideo ref={videoRef} loop muted autoPlay>\n      <source type=\"video/mp4\" src={props.videoURL} />\n    </StyledVideo>\n  )\n}\n\nexport default Video;","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderContainer = styled.div`\n  background-color: #222;\n  height: 75px;\n  padding: 20px;\n  color: white;\n`;\n\nconst HeaderTitle = styled.h1`\n  font-size: 1.5em;\n`;\n\nconst Header = () => (\n  <HeaderContainer>\n    <HeaderTitle>Infinite Scroller using the Interaction Observer API</HeaderTitle>\n  </HeaderContainer>\n)\n\nexport default Header;","import React, { Component, createContext } from 'react';\nimport { API_KEY } from './private/config';\nconst AppContext = createContext();\n\nclass AppProvider extends Component {\n  state = {\n    gifs: [],\n    limit: 10\n  }\n\n  componentDidMount() {\n    this.fetchGIFs()\n  }\n\n  fetchGIFs = () => {\n    fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=${this.state.limit}`)\n      .then(response => response.json())\n      .then(data => {\n        console.log('get the next 10 GIFs')\n        console.log(data.data)\n        this.setState({ gifs: data.data, limit: data.pagination.count + 10 })\n      })\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={{\n        state: this.state,\n        fetchGIFs: this.fetchGIFs\n      }}>\n        {this.props.children}\n      </AppContext.Provider>\n    )\n  }\n}\n\nexport default AppContext;\nexport const AppConsumer = AppContext.Consumer;\nexport { AppProvider };","import React, { useRef, useEffect, useContext } from 'react'\nimport AppContext from '../../AppContext';\n\nexport default function Observable() {\n  const observableRef = useRef();\n  const context = useContext(AppContext);\n\n  useEffect(() => {\n    const options = { root: null, rootMargin: '0px 0px 200px 0px', threshold: 1 }\n    const observableObserver = new IntersectionObserver(([entry]) => {\n        const { isIntersecting } = entry\n        if (isIntersecting) context.fetchGIFs();\n    }, options)\n    observableObserver.observe(observableRef.current);\n\n    // cleanup\n    return () => { observableObserver.unobserve(observableRef.current) }\n  })\n\n  return (\n    <div ref={observableRef}>\n    </div>\n  )\n}\n\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport Video from '../Video/Video';\nimport Header from '../Header/Header';\nimport Observable from './Observable';\nimport AppContext from '../../AppContext';\nimport { link } from 'fs';\n\nconst ListContainer = styled.div`\n  text-align: center;\n`;\n\nconst VideoList = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledLink = styled.div`\n  padding: 10px;\n  a {\n    text-decoration: none;\n    color: #4e4c4c;\n    margin-bottom: 4px;\n  }\n  &:hover {\n    text-decoration: underline;\n\n  }\n`;\n\nconst Description = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  p {\n    text-align: left;\n  }\n  li {\n    text-align: left;\n  }\n`;\n\nconst List = () => {\n  const context = useContext(AppContext);\n  const { gifs } = context.state;\n  return (\n    <ListContainer>\n      <Header />\n      <Description>\n        <div>\n          <p>Interaction Observer API used here to:</p>\n          <ul>\n            <li>\n              Control video element playback based on each elements visibility\n            </li>\n            <li>\n              Detect end of the list to fetch more GIFs (which are displayed as mp4s)\n            </li>\n          </ul>\n        </div>\n      </Description>\n      <VideoList>\n        {\n          gifs\n            ? gifs.map((gif, index) => (\n              <div key={gif.id}>\n                <StyledLink>\n                  <a href={gif.embed_url}>#{index+1} - {gif.title}</a>\n                </StyledLink>\n                  <Video videoURL={gif.images.original_mp4.mp4} />\n                </div>\n              ))\n            : null\n        }\n        <Observable />\n      </VideoList>\n    </ListContainer>\n  )\n}\n\nexport default List;","import List from './List';\n\nexport default List;","import React, { Component } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport List from './components/List';\nimport { AppProvider } from './AppContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: \"Segoe UI\", \"Roboto\", \"Oxygen\", sans-serif;\n  }\n`;\n\nclass App extends Component {\n\n  render() {\n    return (\n      <AppProvider>\n        <GlobalStyle />\n        <List />\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}